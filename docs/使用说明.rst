smart note 使用说明
===================

简介
----

smart note 是一个帮助你复习笔记的工具.

如果你是记录的笔记以文件的形式保存在电脑上,并且所使用的笔记格式是可以解析的,那么只需要在记录笔记的时候加入一些简单的标记,就可以让smart
note在恰当的时候提醒你复习.

快速开始
--------

安装smart note
~~~~~~~~~~~~~~

下载打包好的smart
note,将其解压到电脑上,之后执行文件夹中的SET\_PATH.bat将该目录加入到环境变量(之后就可以在系统任何地方执行note命令).

安装好note之后即可:

1. ``note init`` 创建工作空间

2. 写笔记,执行\ ``note state``\ 确认添加的笔记(该步骤可以跳过),之后执行\ ``note commit``

3. 每天需要复习笔记的时候,执行\ ``note state``
   ,然后进入TASK目录复习,复习完毕之后执行\ ``note commit``

创建工作空间
~~~~~~~~~~~~

工作空间即note用来存放用户数据的地方,这些数据包括:用户记录的笔记,和复习笔记相关的数据,程序日志,用户配置文件.

初始化工作空间的方式为创建一个目录,之后在目录中执行\ ``note init``
命令,初始的工作空间的目录结构如下:

.. code:: sh

    notes/
    |---.NOTE/
    |   |---db # 复习相关的信息
    |   |---log # 日志
    |   |---ignore # ignore配置,下文会讲到
    |---TASK/ # 需要复习的笔记的快捷方式

写笔记
~~~~~~

此时就可以在notes目录下面创建笔记,比如我们创建了一个hello-smart-note.md文件,内容如下:

.. code:: markdown

    # What is smart note ?
    smart note 是一个帮助你复习笔记的工具.

现在我们执行\ ``note status``\ 命令查看一下工作空间的状态,结果如下:

|image0|

note
识别出了文件中需要复习的条目,但是并未修改文件内容,也没有将其加入复习计划.此时需要执行\ ``note commit``\ 使note将该条目加入复习计划.

加入复习计划后,会发现hello-smart-note.md文件内容发生了变化:

.. code:: markdown

    # What is smart note    [❓](SOH0000001EOT)
    smart note 是一个帮助你复习笔记的工具.

文档中出现了\ ``[❓](SOH0000001EOT)``
这个的字符串,不要担心.如果你用markdown编辑器打开,会发现该部分会被渲染成\ `❓ <>`__.

复习笔记
~~~~~~~~

此时该条目已经加入了复习计划,因此note会在恰当的时间提醒你复习.

假设note安排该条目在3天后复习,那么3天后执行\ ``note status``\ 将得到'1个问题需要复习'的提示,并且该文件的快捷方式将放在工作空间根目录下的\ ``TASK``
目录中.进入TASK目录打开文件,会发现之前的\ `❓ <>`__\ 变成了\ `🔔 <>`__,该符号用来提示条目需要复习.

此时如果你还记得该问题,则在\ `❓ <>`__\ 后面标注V,如果你不记得该问题,则标注X.之后执行\ ``note commit``\ 即可.note将继续安排下次复习时间,并且在恰当的时间给你提示.

约束
----

-  文件格式支持:程序默认以UTF-8格式打开文件，因此请使用与UTF-8兼容的格式编写笔记,如:ASCII

-  笔记格式支持:目前仅支持markdown格式

-  操作系统支持:目前仅支持Windows操作系统

状态与转变
----------

note引入了章节和状态的概念,下面做出完整的说明

章节识别
~~~~~~~~

note使用markdown语法中的标题语法识别章节,如:

.. code:: markdown

    # 第一节
    	第一节的内容
    # 第二节
    	第二节的内容

将识别出 "第一节"和"第二节"两个章节.

章节状态
~~~~~~~~

在note中,一个章节总共有4种状态: 普通,处于复习计划,需要复习,暂停复习.

**普通**

用户编写的都应该属于此类.

**处于复习计划**

处于复习计划的章节以符号"❓"结束.

**需要复习**

符号 "🔔" 结束表示该条目需要复习.

**暂停复习**

 符号"📕"表示该章节暂时退出了复习计划(不再提醒).

状态转变
~~~~~~~~

用户允许在3种情况下执行笔记的状态转换,其余状态均由程序处理:

1. 将普通笔记加入复习计划,在标题后面后面添加 '?'即可

2. 需要复习的笔记,在末尾添加XVP中任何一个字符

3. 暂停的笔记,可在末尾添加C,将该章节重新加入复习计划(先前的复习进度不丢失)

每种状态转移均需要使用\ ``note commit``\ 命令提交.

下面是完整的状态转移图:

.. code:: mermaid

    graph LR
    A(普通笔记)
    B(处于复习计划)
    C(需要复习)
    D(暂停复习)

    A-- 输入? -->B
    B-->C
    C-- 输入P -->D
    C-- 输入X,V-->B
    D-- 输入C -->B

如果不使用暂停复习的功能,该图将简化为:

.. code:: mermaid

    graph LR
    A(普通笔记)
    B(处于复习计划)
    C(需要复习)

    A-- 输入? -->B
    B-->C
    C-- 输入X,V-->B

控制字符说明
~~~~~~~~~~~~

+-------------+------------------+------------------------------------------+
| 状态        | 可用的控制字符   | 意义                                     |
+=============+==================+==========================================+
| 普通        | ?                | 将普通笔记加入复习计划,将加入复习计划.   |
+-------------+------------------+------------------------------------------+
| 需要复习🔔   | V                | 表示记得,将继续处于复习计划中            |
+-------------+------------------+------------------------------------------+
|             | X                | 表示不记得,将继续处于复习计划中          |
+-------------+------------------+------------------------------------------+
|             | P                | 表示暂停本次笔记,将转入暂停复习的状态    |
+-------------+------------------+------------------------------------------+
| 暂停复习📕   | C                | 表示继续学习该笔记,将加入复习计划        |
+-------------+------------------+------------------------------------------+

上面所有的字符均不区分大小写和全角.

命令介绍
--------

本节将介绍note提供的所有命令.

-h/--help
~~~~~~~~~

提供所有命令的简单介绍.

status
~~~~~~

显示工作空间的状态.显示的信息包括:

1. 加入复习计划的章节的信息

2. 本次复习了的章节的信息

3. 需要复习的章节的信息

4. 本次暂停了的章节的信息

``state``\ 命令只会对本次需要复习的章节的标题后添加🔔符号,除此之外不会做任何修改,如果确定要提交1,2,4的处理,执行\ ``commit``\ 命令.

init
~~~~

创建初始空间.

commit
~~~~~~

提交工作空间中的状态改变

purge
~~~~~

指定一个文件或者目录,note将会为目标文件或目录中的所有文件创建副本,副本在根目录下的PURGE目录中,然后清除所有的控制信息.因此所有章节都会变成普通的章节.无任何使用note的痕迹.

--doc
~~~~~

显示简要本文档的核心内容的rst版本

程序配置
--------

该程序默认情况下会处理工作空间中的所有文件.如果要程序忽略一些文件的处理,进入\ ``.NOTE``\ 目录下,在ignore文件中添加忽略的文件,忽略文件名支持通配符语法,如:

.. code:: sh

    *.py # 忽略所有以py结尾的文件
    git/ # 忽略git目录
    sqlite.db3 # 忽略sqlite.db3文件

.. |image0| image:: ./res/after status.png
